import sqlite3
from aiogram import types, F, Router
from aiogram.types import Message
from aiogram.filters import Command
import config
import utils
from aiogram import flags
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
import places
import asyncio
from typing import List
import datetime


router = Router()

class ConstructPath(StatesGroup):
    places = State()
    travel_mode = State()
    location = State()

async def cancel_operation(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None:
        await state.clear()

    await message.reply('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Å–≤–æ—ë –¥–µ–π—Å—Ç–≤–∏–µ.', reply_markup=get_standard_keyboard())

def get_standard_keyboard(state: State = None):
    buttons = [
        types.KeyboardButton(text = "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç"),
        types.KeyboardButton(text = "–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è—Ö"),
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard = [buttons], resize_keyboard=True, is_persistent=True)
    return keyboard

@router.message(Command("start"))
async def start(message: Message):
    reply = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}! –ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?"
    await message.answer(reply, reply_markup = get_standard_keyboard())


@router.message(F.text == "–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è—Ö")
async def handle_preferences(message: types.Message):
    buttons = []
    for place in places.places():
        buttons.append(types.KeyboardButton(text = place.name))
    if places.places() == []:
        await message.answer("–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è—Ö", reply_markup=get_standard_keyboard())
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ—Ç–æ—Ä–∞—è –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞", reply_markup = types.ReplyKeyboardMarkup(keyboard=[buttons], one_time_keyboard=True))


@router.message(F.text == "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç")
async def handle_preferences(message: types.Message, state: FSMContext):
    text = """
–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–û—Ç–ø—Ä–∞–≤—Ç–µ –Ω–æ–º–µ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):
"""
    for i,val in enumerate(places.places()):
        text+= f"{i}) {val.name}\n"
    await state.set_state(ConstructPath.places)
    buttons = [types.KeyboardButton(text = "–û—Ç–º–µ–Ω–∏—Ç—å"),]
    keyboard = types.ReplyKeyboardMarkup(keyboard = [buttons], resize_keyboard=True)
    await message.answer(text, reply_markup=keyboard)


@router.message(ConstructPath.places)
async def handle_preferences_place(message: types.Message, state: FSMContext):
    if (await state.get_state() == None):
        return
    if (message.text == "–û—Ç–º–µ–Ω–∏—Ç—å"):
        await cancel_operation(message, state)
        return
    place_indexes = [int(i) for i in message.text.split()]
    await state.update_data(places = [val for i,val in enumerate(places.places()) if i in place_indexes])
    buttons = [types.KeyboardButton(text = "–û—Ç–º–µ–Ω–∏—Ç—å"),]
    keyboard = types.ReplyKeyboardMarkup(keyboard = [buttons], resize_keyboard=True)
    await message.answer("""–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è
0) –ù–∞ –º–∞—à–∏–Ω–µ
1) –ü–µ—à–∫–æ–º
2) –ù–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ
3) –ù–∞ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ
""", reply_markup=keyboard)
    await state.set_state(ConstructPath.travel_mode)

@router.message(ConstructPath.travel_mode)
async def handle_travel_mode(message: types.Message, state: FSMContext):
    if (await state.get_state() == None):
        return
    if (message.text == "–û—Ç–º–µ–Ω–∏—Ç—å"):
        await cancel_operation(message, state)
        return
    mode = ("driving","walking","bicycling","transit")[int(message.text)]
    await state.update_data(travel_mode = mode)
    buttons = [
        types.KeyboardButton(text = "–û—Ç–º–µ–Ω–∏—Ç—å"),
        types.KeyboardButton(text = "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True),
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard = [buttons], resize_keyboard=True)
    await message.answer("–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é", reply_markup=keyboard)
    await state.set_state(ConstructPath.location)

@router.message(ConstructPath.location)
async def handle_travel_mode(message: types.Message, state: FSMContext):
    if (await state.get_state() == None):
        return
    if (message.text == "–û—Ç–º–µ–Ω–∏—Ç—å"):
        await cancel_operation(message, state)
        return
    await state.update_data(location = message.location)
    path = await build_path(message, state)
    data = await state.get_data()
    if (len(path[0][1:]) == 0) :
        reply = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤—Å–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç—ã"
        await message.answer(reply, reply_markup=get_standard_keyboard())
        await state.clear()
        return
    if len(path[0][1:]) < len(data['places']):
        reply = """
–í–æ—Ç –≤ –∫–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ –≤–∞–º —Å–ª–µ–¥—É–µ—Ç –ø—Ä–æ–π—Ç–∏—Å—å –ø–æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º(–∫ —Å–æ–∂–µ–ª–µ–Ω–∏—é –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤—ã –Ω–µ —É—Å–ø–µ–µ—Ç–µ –ø—Ä–æ–π—Ç–∏):
"""
    else:
        reply = """
–í–æ—Ç –≤ –∫–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ –≤–∞–º —Å–ª–µ–¥—É–µ—Ç –ø—Ä–æ–π—Ç–∏—Å—å –ø–æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º:
"""
    for i,val in enumerate(path[0][1:]):
        reply+=f"{i+1}) {val.name}\n"
    await message.answer(reply, reply_markup=get_standard_keyboard())
    await state.clear()

async def build_path(message: Message, state: FSMContext):
    data = await state.get_data()
    lat = data['location'].latitude
    lon = data['location'].longitude
    best_path = await build_path_rec([places.Place(address=f"{lat},{lon}")], data['places'], data['travel_mode'])
    return best_path

async def build_path_rec(current_path: List[places.Place], places_left: List[places.Place], mode: str, time: int = 0):
    best_path = (None, -1)
    if (len(places_left) == 0):
        return (current_path, time)
    for i in range(len(places_left)):
        opens = [int(i) for i in places_left[i].start.split(":")]
        closes = [int(i) for i in places_left[i].end.split(":")]
        opens = datetime.time(opens[0], opens[1])
        closes = datetime.time(closes[0], closes[1])
        opens = datetime.datetime.combine(datetime.datetime.now(), opens)
        closes = datetime.datetime.combine(datetime.datetime.now(), closes)
        current_time = datetime.datetime.now() + datetime.timedelta(seconds=time)
        if (opens <= current_time <= closes):
            time_to = (await utils.fetch_from_google(current_path[-1].address, places_left[i].address, mode))['routes'][0]['legs'][0]['duration']['value']
            path = await build_path_rec(current_path + [places_left[i]], places_left[:i]+places_left[i+1:], mode, time+time_to)
            if best_path[1] == -1 or best_path[1] > path[1]:
                best_path = path
    if best_path[1] == -1 or len(best_path[0]) < len(current_path):
        best_path = (current_path, time)
        
    return best_path

    
@router.message()
async def handle_text_message(message: types.Message):
    names = []
    for i in places.places():
        names.append(i.name)
    if (message.text in names):
        place_ind = names.index(message.text)
        place: places.Place = places.places()[place_ind]
        reply = f"""
üè∑–ù–∞–∑–≤–∞–Ω–∏–µ: 
{place.name}

üí¨–û–ø–∏—Å–∞–Ω–∏–µ: 
{place.description}

üìù–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ –∏ –∫—É–ª—å—Ç—É—Ä–Ω–æ–µ –∑–Ω–∞—á–Ω–µ–∏–µ: 
{place.value}

üíµ–ü—Ä–∞–π—Å–ª–∏—Å—Ç:
{place.price}

üïî–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {place.start}-{place.end}

üó∫–ê–¥—Ä–µ—Å: {place.address}

üìû–¢–µ–ª–µ—Ñ–æ–Ω: {place.phone}

üöç–ö–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è: {place.transport}
{place.url}"""
        
        await message.answer(reply, reply_markup = get_standard_keyboard())
        return
    
    #response = await utils.generate_text(message.text)
    #await message.answer(response, reply_markup=get_standard_keyboard())
    