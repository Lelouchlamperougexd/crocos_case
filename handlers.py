import sqlite3
from aiogram import types, F, Router
from aiogram.types import Message
from aiogram.filters import Command
import config
import utils
from aiogram import flags
from aiogram.fsm.context import FSMContext

router = Router()

def get_standard_keyboard():
    keyboard = types.ReplyKeyboardMarkup(keyboard = [[
        types.KeyboardButton(text = "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True),
        types.KeyboardButton(text = "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç"),
        types.KeyboardButton(text = "–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–æ–ø—Ä–µ–º–∏—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è—Ö"),
    ]], resize_keyboard=True, is_persistent=True)
    return keyboard

@router.message(Command("start"))
async def start(message: Message):
    reply = "–ü—Ä–∏–≤–µ—Ç!"
    await message.answer(reply, reply_markup = get_standard_keyboard())


@router.message(F.text == "–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–æ–ø—Ä–µ–º–∏—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è—Ö")
async def handle_preferences(message: types.Message):
    buttons = []
    with  sqlite3.connect('db.sqlite') as connection :
        cursor = connection.cursor()
        cursor.execute("SELECT name FROM places")
        names = cursor.fetchall()
        for name in names:
            buttons.append(types.KeyboardButton(text = name[0]))
        cursor.close()
    if names == []:
        await message.answer("–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç–æ–ø—Ä–µ–º–∏—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è—Ö", reply_markup=get_standard_keyboard())
    else:
        await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–æ–ø—Ä–µ–º–∏—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è—Ö", reply_markup = types.ReplyKeyboardMarkup(keyboard=[buttons], one_time_keyboard=True))


@router.message()
async def handle_text_message(message: types.Message):
    if message.location is not None:
        await handle_location(message)

    names = []
    data = []
    with  sqlite3.connect('db.sqlite') as connection :
        cursor = connection.cursor()
        cursor.execute("SELECT * FROM places")
        data = cursor.fetchall()
        for i in data:
            names.append(i[0])
        cursor.close()
    if (message.text in names):
        place_ind = names.index(message.text)
        place = data[place_ind]
        reply = f"""
üè∑–ù–∞–∑–≤–∞–Ω–∏–µ: 
{place[0] if place[0] != 'None' else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}

üí¨–û–ø–∏—Å–∞–Ω–∏–µ: 
{place[1] if place[1] != 'None' else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}

üìù–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ –∏ –∫—É–ª—å—Ç—É—Ä–Ω–æ–µ –∑–Ω–∞—á–Ω–µ–∏–µ: 
{place[2] if place[2] != 'None' else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}

üíµ–ü—Ä–∞–π—Å–ª–∏—Å—Ç:
{place[3] if place[3] != 'None' else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}

üïî–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {place[4] if place[4] != 'None' else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö" }-{place[5] if place[5] != 'None' else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}

üó∫–ê–¥—Ä–µ—Å: {place[6] if place[6] != 'None' else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}

üìû–¢–µ–ª–µ—Ñ–æ–Ω: {place[7] if place[7] != 'None' else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}

üöç–ö–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è: {place[8] if place[8] != 'None' else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}
https://maps.google.com/maps?q={place[0].replace(" ", "+").replace("¬ª", "").replace("¬´", "").replace("<<", "").replace(">>", "")}
"""
        await message.answer(reply, reply_markup = get_standard_keyboard())
        return
    
    response, _ = await utils.generate_text(message.text)
    await message.answer(response, reply_markup=get_standard_keyboard())
    

async def handle_location(message: types.Message):
    lat = message.location.latitude
    lon = message.location.longitude
    with  sqlite3.connect('db.sqlite') as connection :
        cursor = connection.cursor()
        cursor.execute(f"SELECT * FROM users WHERE telegram_id = {message.from_user.id}")
        if cursor.fetchone() is None:
            cursor.execute(f"INSERT INTO users VALUES ({message.from_user.id}, '{lat}', '{lon}')")
        else:
            cursor.execute(f"UPDATE users SET lat = {lat}, long = {lon} WHERE telegram_id = {message.from_user.id}")
        connection.commit()
        cursor.close()
    reply = "–ö–∞–∫–æ–π —Ç–æ –æ—Ç–≤–µ—Ç"
    await message.answer(reply, reply_markup=get_standard_keyboard())